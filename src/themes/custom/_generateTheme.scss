@import '../functions';

@mixin theme($property, $key, $inlineExtra:null, $postExtra:null) {
    @each $theme in $themes {
        @if (themeExists($key, $theme)) {
            $value: getThemeValue($key, $theme);
            //:global(.#{$theme}) & {
            // @debug "#{$property}: #{$inlineExtra} #{$value} #{$postExtra} !important";
            @at-root .#{$theme} #{&} {
                #{$property}: #{$inlineExtra} #{$value} #{$postExtra} !important; //fallback for browsers that shouldn't exist anymore
                #{$property}: #{$inlineExtra} var(--theme-#{$theme}-#{$key}, #{$value}) #{$postExtra} !important;
            }
        }
        @else if $theme !='default' and $theme !='light' and $theme !='dark' {
            //check for legacy references, don't error on those
            @error "Property #{$key} doesn't exist in #{$theme}";
        }
    }
}

@mixin generateThemeMappings($themeName, $newThemeMap) {
    //creates/adds to list of theme names
    $themes: append($themes, $themeName, $separator: comma) !global;
    @each $key,
    $value in $newThemeMap {
        //adds new themeKey if doesn't exist
        @if not map-has-key($themeValues, $key) {
            $themeValues: map-merge($themeValues, ($key: ( $themeName: $value))) !global;
        }
        //adds to existing key map
        @else {
            $existingKeyMap: map-get($themeValues, $key);
            //if theme variable doesn't exist, add it
            @if not map-get($existingKeyMap, $themeName) {
                $newKeyMap: map-merge($existingKeyMap, ( $themeName: $value));
                $themeValues: map-merge($themeValues, ( $key: $newKeyMap)) !global;
            }
        }
    }
}

@mixin generateThemeVariables {
    @each $key,
    $val in $themeValues {
        @each $theme in $themes {
            @if (themeExists($key, $theme)) {
                --theme-#{$theme}-#{$key}: #{getThemeValue($key, $theme)};
            }
        }
    }
}
